version: "3"
services:
  db:
    container_name: pg_db
    image: postgres:16
    restart: always
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: eth-overflow
    ports:
      - '5432:5432'
    volumes:
      - postgres-data:/var/lib/postgresql/data

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    depends_on:
      - db
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: root@root.com
      PGADMIN_DEFAULT_PASSWORD: root
      SCRIPT_NAME: "/pgadmin"
    labels:
      traefik.enable: true
      traefik.http.routers.pgadmin.entrypoints: web
      traefik.http.routers.pgadmin.rule: PathPrefix(`/pgadmin`)
      traefik.http.services.pgadmin.loadbalancer.server.port: 80
    restart: unless-stopped

  backend:
    container_name: hack-backend
    build:
      context: ./backend/
      dockerfile: ./Dockerfile
    depends_on:
      - db
    ports:
      - "3000:3000"
    working_dir: /app
    volumes:
      - ./backend:/app\
      - backend_node-modules:/app/node_modules
    env_file:
      - ./backend/.env
    labels:
      traefik.enable: true
      traefik.http.routers.backend.entrypoints: web
      traefik.http.routers.backend.rule: PathPrefix(`/api`)
      traefik.http.services.backend.loadbalancer.server.port: 3000
    restart: unless-stopped

  frontend:
    container_name: hack-frontend
    build:
      context: ./frontend/
      dockerfile: ./Dockerfile
    ports:
      - "3001:3000"
    command: [ "sh", "-c", "yarn install && yarn start" ]
    working_dir: /app
    volumes:
      - ./frontend:/app
      - /app/node_modules
    labels:
      traefik.enable: true
      traefik.http.routers.frontend.entrypoints: web
      traefik.http.routers.frontend.rule: PathPrefix(`/`)
      traefik.http.services.frontend.loadbalancer.server.port: 3000
    restart: unless-stopped
    environment:
      - CHOKIDAR_USEPOLLING=true

  traefik:
    image: traefik
    container_name: traefik
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --entrypoints.web.address=:80
    ports:
      - 80:80
      - 8080:8080
    restart: unless-stopped

volumes:
  postgres-data:
  backend_node-modules: