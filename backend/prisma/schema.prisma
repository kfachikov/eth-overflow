// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  name     String
  username String  @unique
  karma    Int     @default(0)

  questions Question[]
  answers Answer[]
  commentsOnQuestions CommentQuestion[]
  commentsOnAnswers CommentAnswer[]

  votesOnQuestion VotesOnQuestion[]
  votesOnAnswer VotesOnAnswer[]
}

model Picture {
  id        Int @id @default(autoincrement())
  url       String
}

model Question {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  score     Int      @default(0)

  createdAt DateTime @default(now())
  modifiedAt DateTime @default(now())

  author    Account  @relation(fields: [authorId], references: [id])
  authorId  Int

  selectedAnswer Answer? @relation("SelectedAnswerToQuestions", fields: [selectedAnswerId], references: [id], onDelete: SetNull)
  selectedAnswerId Int? @unique

  answers Answer[] @relation("AnswerToQuestion")

  comments CommentQuestion[] @relation("CommentToQuestion")

  course Course? @relation(fields: [courseId], references: [id], onDelete: SetNull)
  courseId Int?

  votesOnQuestion VotesOnQuestion[]
}

model Course {
  id        Int      @id @default(autoincrement())
  name      String
  
  questions Question[]
}

model Answer {
  id        Int      @id @default(autoincrement())
  content   String
  score     Int      @default(0)

  createdAt DateTime @default(now())
  modifiedAt DateTime @default(now())

  author    Account  @relation(fields: [authorId], references: [id])
  authorId  Int

  question  Question @relation("AnswerToQuestion", fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int @unique

  selectedForQuestion  Question? @relation("SelectedAnswerToQuestions")

  comments CommentAnswer[] @relation("CommentToAnswer")

  votesOnAnswer VotesOnAnswer[]
}

model CommentQuestion {
  id        Int      @id @default(autoincrement())
  content   String

  author    Account  @relation(fields: [authorId], references: [id])
  authorId  Int

  question    Question?  @relation("CommentToQuestion", fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int?

  createdAt DateTime @default(now())
  modifiedAt DateTime @default(now())
}

model CommentAnswer {
  id        Int      @id @default(autoincrement())
  content   String

  author    Account  @relation(fields: [authorId], references: [id])
  authorId  Int

  answer    Answer  @relation("CommentToAnswer", fields: [answerId], references: [id], onDelete: Cascade)
  answerId  Int

  createdAt DateTime @default(now())
  modifiedAt DateTime @default(now())
}

model VotesOnQuestion {
  id        Int      @id @default(autoincrement())
  upvote    Boolean

  account   Account  @relation(fields: [accountId], references: [id])
  accountId Int

  question  Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int
}

model VotesOnAnswer {
  id        Int      @id @default(autoincrement())
  upvote    Boolean

  account   Account  @relation(fields: [accountId], references: [id])
  accountId Int

  answer    Answer @relation(fields: [answerId], references: [id], onDelete: Cascade)
  answerId  Int
}